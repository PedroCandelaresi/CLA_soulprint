name: Deploy Frontend (Next.js)
on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-frontend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, linux, x64, cla]

    env:
      IMAGE_NAME: cla_frontend
      CONTAINER_NAME: cla_frontend
      BASE_DIR: /home/cla

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Contexto del runner
        run: |
          echo "whoami=$(whoami)"; id
          docker version || true

      - name: Copiar .env.production del VPS
        run: |
          if [ -f "$BASE_DIR/env/front/.env.production" ]; then
            cp "$BASE_DIR/env/front/.env.production" .env.production
            echo "OK: .env.production copiado en el workspace"
          else
            echo "::error::No se encontr칩 $BASE_DIR/env/front/.env.production"; exit 1
          fi

      # (Opcional pero recomendado) Verificar que .env.production qued칩 en el workspace
      - name: Listar archivos relevantes
        run: |
          ls -la
          [ -f .env.production ] && echo ".env.production est치 presente"

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME:latest .

      - name: Stop & remove previous container (si existe)
        run: |
          docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$" \
            && docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME || true

      - name: Run new container
        run: |
          docker run -d --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 3200:3200 \
            -e NODE_ENV=production \
            $IMAGE_NAME:latest

      - name: Limpiar im치genes dangling
        run: docker image prune -f
